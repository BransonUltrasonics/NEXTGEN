<?xml version="1.0" encoding="UTF-8"?>
<!--###################################################
        BRANSON AUTOMATION FRAMEWORK - ULTRASONIC

Filename:    Cov_Build_VSB_VIP_5728.xml
Description: This file is an ANT script to perform Coverity build the VSB VIP Project of Supervisor Controller
Pre-condition: 1. All the required input to be given by control.properties
		  2. set "WIND_LAYER_PATHS" TO BRANSON_DRV_LAYER Layer Path as an environment variable
		  3. set "WIND_BSP_PATHS" TO Individual BSPâ€™s Layer Path separated using semicolon as an environment variable
		  4. set "WIND_WRTOOL_WORKSPACE" = C:\Branson_Automation\Build\
		  5. add wrtool.bat path to the system path
1. This file is invoked by Master.xml with appropriate properties
2. WRtool is utilized to perform VSB and VIP build in VxWorks
3. This file performs coverity vsb and vip builds to generated VxWorks.bin
4. The build types supported are quick build and clean build

#####################################################-->
<project basedir="." name="Cov_Build_VSB_VIP_5728" default="main">
	
	<property name = "navContrib" value = "\..\Framework_Files\ant-contrib-1.0b3-bin\ant-contrib\"/>
	
	<!--Navigates to the control.properties path-->
	<property name = "navControl" value = "\..\Framework_Files\"/>
	
	<!--Load config.ini properties-->
	<property file = "${basedir}/../../BAF_Utilities/config.ini"/>
	<sleep seconds="2"/>
	<property file="${basedir}/../Framework_Files/Control.properties"/>
	
	<!--Navigating to Workbench path-->
	<property name = "navWorkbench" value = "${WORKBENCH_PATH}"/>
	
	<!--Navigating to Workspace path-->
	<property name = "navWorkspace" value = "${WORKSPACE_PATH}"/>
	
	<!--Navigating to Reference Workspace path -->
	<property name="navReferenceWorspace" value="${VSB_VIP_WORKSPACE_PATH}"/>

	<!--Navigating to the source code path in Windriver Workbench-->
	<property name = "navSourceWorkbench" value = "${navWorkbench}\vxworks-7"/>
	
	<!--VSB Project Name-->
	<property name = "vsbName" value = "${SC_VSB_NAME}"/>
	
	<!--VIP Project Name-->
	<property name = "vipName" value = "${SC_VIP_NAME}"/>

	
	<!--Provides the path of vxWorks.bin-->
	<property name = "binaryPath" value = "${navWorkspace}\${vipName}\default"/> 
	
	<!--Coverity result path -->
	<property name= "Cov_Build_VSB_5728_result_path" value="${basedir}\\..\\..\\Results_Next_Gen\\${TIMESTAMP}\\Coverity_Build_Result\\VSB_SC_Coverity_Build_Result_${TIMESTAMP}"/>
	<property name= "Cov_Build_VIP_5728_result_path" value="${basedir}\\..\\..\\Results_Next_Gen\\${TIMESTAMP}\\Coverity_Build_Result\\VIP_SC_Coverity_Build_Result_${TIMESTAMP}"/>
		
	<!--Setting antcontrib path-->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${basedir}${navContrib}ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<target name="Delete_Previous_project">
		<available file="${navReferenceWorspace}\${vipName}"  property="vip.present"/>
		<available file="${navReferenceWorspace}\${vsbName}"  property="vsb.present"/>
		<if>
		<equals arg1="${vip.present}" arg2="true" casesensitive="false"/>
		<then>
			<echo message="[Cov_Build_VSB_VIP_5728] Deleting the VIP project created during the previous build ..." />
			<exec dir="${navReferenceWorspace}" executable="cmd" failonerror="true" >
				<arg line="/c rmdir /s /q ${navReferenceWorspace}\${SC_VIP_NAME}"/>
			</exec>
			<echo message="[Cov_Build_VSB_VIP_5728] VIP Project with the same name was deleted." />
		</then>
		</if>
		
		<if>
		<equals arg1="${vsb.present}" arg2="true" casesensitive="false"/>
		<then>
			<echo message="[Cov_Build_VSB_VIP_5728] Deleting the VSB project created during the previous build ..." />
			<exec dir="${navReferenceWorspace}" executable="cmd" failonerror="true" >
				<arg line="/c rmdir /s /q ${navReferenceWorspace}\${SC_VSB_NAME}"/>
			</exec>
			<echo message="[Cov_Build_VSB_VIP_5728] VSB Project with the same name was deleted." />
		</then>
		</if>
	</target>
	
	<!--Move Source files from Load dir to reference workspace -->
	<target name = "Move_Source_Files_VIP">
		<echo message="[Build_VSB_VIP_5728]Move Source files to reference workspace"/>
		<copy todir="${navReferenceWorspace}\${SC_VIP_NAME}" >
			<fileset dir="${basedir}\..\${SC_VIP_NAME}" includes="**"/>  
		</copy>
	</target>
	
	<!--Move Source files from Load dir to reference workspace -->
	<target name = "Move_Source_Files_VSB">
		<echo message="[Cov_Build_VSB_VIP_5728]Move Source files to reference workspace"/>
		<copy todir="${navReferenceWorspace}\${SC_VSB_NAME}" >
			<fileset dir="${basedir}\..\${SC_VSB_NAME}" includes="**"/>  
		</copy>
	</target>
	
	<!--Target to perform VSB Import-->
	<target name="VSB_Import">
		<echo message="[Cov_Build_VSB_VIP_5728] ****Performing VSB Import****" />
		<exec dir="${navReferenceWorspace}" executable="cmd" failonerror="true" >
				<arg line="/c wrtool.bat prj import ${vsbName}"/>
		</exec>
	</target>
	
	<!--Target to perform VSB Clean  for Clean build-->
	<target name="VSB_Clean">
		<echo message="[Cov_Build_VSB_VIP_5728] ****Performing VSB Clean****" />
		<exec dir="${navReferenceWorspace}" executable="cmd" failonerror="true" >
				<arg line="/c wrtool.bat prj clean ${vsbName}"/>
		</exec>
	</target>
	
	<!--Target to perform VSB build-->
	<target name="vsb_build">
		<echo message="[Cov_Build_VSB_VIP_5728] ****Performing VSB build****" />
		<exec dir="${navReferenceWorspace}" executable="cmd" failonerror="true" >
				<arg line="/c wrtool.bat -data ${navReferenceWorspace} prj build ${vsbName}"/>
		</exec>
	</target>
		
	<!--Target to perform SYNC VSB-->
	<target name="SYNC_VSB">
		<echo message="[Cov_Build_VSB_VIP_5728] ****Performing VSB SYNC****" />
		<exec dir="${navReferenceWorspace}" executable="cmd" >
				<arg line="/c wrtool.bat prj context update -vsb ${vsbName} -toolchain"/>				
		</exec>
		<echo message="[Cov_Build_VSB_VIP_5728] ****VSB SYNC Completed****" />
	</target>
	
	<!--Target to perform VIP Import-->
	<target name="VIP_Import">
		<echo message="[Cov_Build_VSB_VIP_5728] ****Performing VIP Import****" />
		<exec dir="${navReferenceWorspace}" executable="cmd" failonerror="true" >
				<arg line="/c wrtool.bat prj import ${SC_VIP_NAME}"/>
		</exec>
	</target>
	
	<!--Target to perform VIP Clean-->
	<target name="vip_clean">
		<echo message="[Cov_Build_VSB_VIP_5728] ****Performing VIP Clean****" />
		<exec dir="${navReferenceWorspace}" executable="cmd" failonerror="true" >
				<arg line="/c wrtool.bat prj clean ${SC_VIP_NAME}"/>
		</exec>
	</target>
	
	<target name="coverity_build_VIP">
		<trycatch>
			<try>
			<exec dir="${cov_build_path}" executable="cmd" failonerror="true" >
				<arg line="/c cov-build.exe --dir ${Cov_Build_VIP_5728_result_path} wrtool prj build ${navReferenceWorspace}\${SC_VIP_NAME}"/>
			</exec>
			</try>
			<catch>
			<propertyfile file="${basedir}\..\Framework_Files\Control.properties">
				<entry  key="SC_Coverity_Status" value="FAIL"/>
				<entry  key="SC_Coverity_Error_Description" value="SC VSB VIP build failed" />
			</propertyfile>			
			<fail>"[Cov_Build_VSB_VIP_5728] ***Fail! Coverity Build failed due to the SC VSB build failure"</fail>
			</catch>
		</trycatch>
		<!--Checking if the build log file is present or not -->
		<available file="${Cov_Build_VIP_5728_result_path}\build-log.txt"  property="log.present"/>
		<trycatch>
			<try>
				<if>
					<equals arg1="${log.present}" arg2="true"/>
				<then>
					<echo>"[Cov_Build_VSB_VIP_5728]Build-log file is present at ${Cov_Build_VIP_5728_result_path}"</echo>
				</then>
				<else>
				<propertyfile file="${basedir}\..\Framework_Files\Control.properties">
					<entry  key="SC_Coverity_Status" value="FAIL"/>
					<entry  key="SC_Coverity_Error_Description" value="Build-Log file not present"/>
				</propertyfile>
				<fail>"[Cov_Build_VSB_VIP_5728] ***Fail! Build-log is not present at ${Cov_Build_VIP_5728_result_path}"</fail>
				</else>
				</if>
			</try>
			<catch>

			</catch>
		</trycatch>
	</target>
	
	<target name="coverity-analysis">
	<echo>"[Cov_Build_VSB_VIP_5728]Performing coverity analysis for VSB_VIP SC Build "</echo>
	<trycatch>
		<try>
		<!-- run the coverity analysis and get the summary of the log -->
		<exec dir="${cov_build_path}" executable="cmd" failonerror="false" >
			<arg line="/c cov-analyze.exe --dir ${Cov_Build_VIP_5728_result_path}"/>
		</exec>
		</try>
		<catch>
			<propertyfile file="${basedir}\..\Framework_Files\Control.properties">
				<entry  key="SC_Coverity_Status" value="FAIL"/>
				<entry  key="SC_Coverity_Error_Description" value="coverity analyze command exit with error"/>
			</propertyfile>
			
			<fail>"[Cov_Build_VSB_VIP_5728] ***Fail! coverity analyze command exit with error for VSB VIP SC Build****"</fail>
		</catch>
	</trycatch>
	<available file="${Cov_Build_VIP_5728_result_path}\output\analysis-log.txt"  property="analysislog.present"/>
	<trycatch>
		<try>
		<if>
		<equals arg1="${analysislog.present}" arg2="true"/>
		<then>
			<echo>"[[Cov_Build_VSB_VIP_5728]Analysislog.txt is present at ${Cov_Build_VIP_5728_result_path}\output"</echo>
		</then>
		<else>
			<propertyfile file="${basedir}\..\Framework_Files\Control.properties">
				<entry  key="SC_Coverity_Status" value="FAIL"/>
				<entry  key="SC_Coverity_Error_Description" value="coverity analysis failed for VSB VIP SC Build"/>
			</propertyfile>
		</else>
		</if>
		</try>
		<catch>			
			<fail>"[Cov_Build_VSB_VIP_5728] ***Fail! Analysislog.txt is not present at ${Cov_Build_VIP_5728_result_path}\output and coverity analysis failed for VSB VIP SC build"</fail>
		</catch>
	</trycatch>
	</target>
	
	<target name="coverity-format">
	<trycatch>
		<try>
			<exec dir="${cov_build_path}" executable="cmd" failonerror="true" >
				<arg line="/c cov-format-errors.exe --dir ${Cov_Build_VIP_5728_result_path}"/>
			</exec>
		</try>
		<catch>
			<propertyfile file="${basedir}\..\Framework_Files\Control.properties">
				<entry  key="SC_Coverity_Status" value="FAIL"/>
				<entry  key="SC_Coverity_Error_Description" value="Coverity format command exit with error"/>
			</propertyfile>			
			<fail>"[Cov_Build_VSB_VIP_5728]***Fail! Coverity format command exit with error "</fail>
		</catch>
	</trycatch>
	</target>
	
	<target name="coverity-error-count">
	<trycatch>
		<try>		
			<loadfile property="cov-analysis-log" srcfile="${Cov_Build_VIP_5728_result_path}\output\analysis-log.txt" /> 
			<for param="line" delimiter="${line.separator}" list="${cov-analysis-log}">
				<sequential>
					<propertyregex property="defect_present" input="@{line}" regexp="Defect occurrences found\s*:\s*([0-9]+)" select="\1" casesensitive="false" />
				</sequential>
			</for>
			<echo>"Coverity flag : ${coverityStopOnError} "</echo>
			<echo>"defect count: ${defect_present}"</echo>
			<condition property="defect_present" value="-1">
				<isset property="defect_present"/>
			</condition> 
			<condition property="check">
				<matches pattern="[1-9]" string="${defect_present}"/>
			</condition>
			<if>
			<equals arg1="${check}" arg2="true"/>
			<then>
				<propertyfile file="${basedir}\..\Framework_Files\Control.properties">
					<entry  key="SC_Coverity_Error_Description" value="SC_VIP ${defect_present} Defect count"/>
					<entry  key="SC_Coverity_Status" value="PASS"/>
				</propertyfile>
				<if>
				<equals arg1="${coverityStopOnError}" arg2="ON" casesensitive="false"/>
					<then>
						<fail> </fail>
					</then>
				</if>
			</then>
			<else>
				<echo>"[Cov_Build_VSB_VIP_5728]Coverity Build passed for SC VSB VIP Component"</echo>
				<propertyfile file="${basedir}\..\Framework_Files\Control.properties">
						<entry  key="SC_Coverity_Status" value="PASS"/>
				</propertyfile>
			</else>
			</if>
			</try>
			<catch>				
				<fail message="[Cov_Build_VSB_VIP_5728] ***Fail! Coverity Build failed for SC"></fail>
			</catch>
		</trycatch>
	</target>
	
		
	<target name="coverity-commit-defects">
	<trycatch>
		<try>
			<exec dir="${cov_build_path}" executable="cmd" failonerror="true" >
				<arg line="/c cov-commit-defects.exe --host buc-dan-sl01 --port 8080 --dir ${Cov_Build_VIP_5728_result_path} --user admin --password Orange56 --stream SC_VIP"/>
			</exec>
		</try>
		<catch>
				<propertyfile file="${basedir}${navControl}Control.properties">
					<entry  key="SC_Coverity_Status" value="FAIL"/>
					<entry  key="SC_Coverity_Error_Description" value="coverity commit command exit with error for 5728"/>
				</propertyfile>			
			<fail>"[Cov_Build_VSB_VIP_5728] ***Fail! coverity commit command exit with error for 5728****"</fail>
		</catch>
	</trycatch>
	</target>
	
	<target name="main">
		<trycatch>
			<try>	
			
				<antcall target="Delete_Previous_project">
				</antcall>
				
				<antcall target="Move_Source_Files_VIP">
				</antcall>
				
				<antcall target="Move_Source_Files_VSB">
				</antcall>
				
				<antcall target="VSB_Import">
				</antcall>
				
				<antcall target="VSB_Clean">
				</antcall>
				
				<antcall target="vsb_build">
				</antcall>
				
				<antcall target="SYNC_VSB">
				</antcall>
				
				<sleep seconds="5"/>
				
				<echo message="[Cov_Build_VSB_VIP_5728] ****Starting VIP Import****" />

				<antcall target="VIP_Import">
				</antcall>				
	
				<antcall target="vip_clean">
				</antcall>
				
				<antcall target="coverity_build_VIP">
				</antcall>
				
				<antcall target="coverity-analysis">
				</antcall>
				
				<antcall target="coverity-format">
				</antcall>
				
				<antcall target="coverity-error-count">
				</antcall>
				
				<antcall target="coverity-commit-defects">
				</antcall>				
			</try>
	</trycatch>	
	</target>
</project>
