/******************************************************************************
 ******************************************************************************
 **** This file was automatically generated by Wind River's
 **** MIB Compiler, version 10.2.
 **** This file was generated using the -skel.h switch.
 **** 
 **** This file contains declarations of stub functions to aid in building
 **** the agent MIB interface.  It declares all the MIB get, set, test and
 **** next method routines that you will need to supply.  You'll probably
 **** want to FORCE-INCLUDE this file when using the -mib.c output mode.
 **** 
 **** To generate the skeletal stub functions themselves, run the MIB compiler
 **** with the -skel switch.
 **** 
 **** YOU MAY MODIFY THIS FILE BUT BEWARE ACCIDENTALLY OVERWRITING IT
 **** BY REGENERATING IT WITH THE MIB COMPILER.
 **** 
 **** Last build date: Fri Jan 08 15:21:03 2010
 **** from files:
 ****  D:/WindRiver37C/vxworks-6.7/target/src/wrn/wm/snmp/std-mibs/rfc1213.mib,
 ****  D:/WindRiver37C/vxworks-6.7/target/src/wrn/wm/snmp/std-mibs/rfc2571.mib,
 ****  D:/WindRiver37C/vxworks-6.7/target/src/wrn/wm/snmp/std-mibs/rfc2575.mib,
 ****  D:/WindRiver37C/vxworks-6.7/target/src/wrn/wm/snmp/std-mibs/rfc2572.mib,
 ****  D:/WindRiver37C/vxworks-6.7/target/src/wrn/wm/snmp/std-mibs/rfc2573.mib,
 ****  D:/WindRiver37C/vxworks-6.7/target/src/wrn/wm/snmp/std-mibs/rfc2574.mib,
 ****  D:/WindRiver37C/vxworks-6.7/target/src/wrn/wm/snmp/std-mibs/rfc2576.mib,
 ****  D:/WindRiver37C/vxworks-6.7/target/src/wrn/wm/snmp/std-mibs/rfc2786.mib,
 ****  D:/WindRiver37C/vxworks-6.7/target/src/wrn/wm/snmp/std-mibs/rfc1907.mib,
 ****  D:/WindRiver37C/vxworks-6.7/target/src/wrn/wm/snmp/std-mibs/iftype.mib,
 ****  D:/WindRiver37C/vxworks-6.7/target/src/wrn/wm/snmp/std-mibs/rfc2233.mib,
 ****  D:/WindRiver37C/vxworks-6.7/target/src/wrn/wm/snmp/std-mibs/rfc2742.mib,
 ****  snmpmib2.mib, rfc2233.ctl,
 ****  D:/WindRiver37C/vxworks-6.7/target/src/wrn/wm/demo/snmpctls/v3mib.ctl,
 ****  D:/WindRiver37C/vxworks-6.7/target/src/wrn/wm/demo/snmpctls/ax2742.ctl
 ******************************************************************************
 ******************************************************************************
 */

void systemGet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void systemSet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void systemTest(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void sysOREntry_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void sysOREntry_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void interfacesGet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ifEntryGet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ifEntryNext(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ifEntrySet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ifEntryTest(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ipGet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ipSet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ipTest(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ipAddrEntryGet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ipAddrEntryNext(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ipRouteEntryGet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ipRouteEntrySet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ipRouteEntryTest(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ipRouteEntryNext(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ipNetToMediaEntryGet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ipNetToMediaEntrySet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ipNetToMediaEntryTest(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ipNetToMediaEntryNext(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void icmpGet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void tcpGet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void tcpConnEntryGet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void tcpConnEntrySet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void tcpConnEntryTest(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void tcpConnEntryNext(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void udpGet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void udpEntryGet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void udpEntryNext(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpGet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpSet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTest(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ifXEntryGet(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void ifXEntryNext(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void agentxGeneral_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void agentxGeneral_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void agentxConnection_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void agentxConnection_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void null_next_async(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void agentxConnectionEntry_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void agentxConnectionEntry_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void agentxSession_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void agentxSession_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void agentxSessionEntry_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void agentxSessionEntry_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void agentxSessionEntry_set(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void agentxSessionEntry_test(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void agentxRegistration_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void agentxRegistration_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void agentxRegistrationEntry_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void agentxRegistrationEntry_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void usmDHPublicObjects_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void usmDHPublicObjects_set(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void usmDHPublicObjects_test(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void usmDHPublicObjects_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void usertable_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void usertable_set(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void usertable_test(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void usertable_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void get_snmpEngineID(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void get_snmpEngineBoots(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void get_snmpEngineTime(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void get_int_async(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void get_uint_async(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void get_TestAndIncr_async(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void set_TestAndIncr_async(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void test_TestAndIncr_async(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTargetAddrEntry_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTargetAddrEntry_set(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTargetAddrEntry_test(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTargetAddrEntry_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTargetParamsEntry_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTargetParamsEntry_set(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTargetParamsEntry_test(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTargetParamsEntry_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpNotifyEntry_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpNotifyEntry_set(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpNotifyEntry_test(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpNotifyEntry_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpNotifyFilterProfileEntry_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpNotifyFilterProfileEntry_set(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpNotifyFilterProfileEntry_test(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpNotifyFilterProfileEntry_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpNotifyFilterEntry_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpNotifyFilterEntry_set(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpNotifyFilterEntry_test(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpNotifyFilterEntry_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpProxyEntry_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpProxyEntry_set(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpProxyEntry_test(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpProxyEntry_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void contexttable_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void contexttable_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void grouptable_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void grouptable_set(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void grouptable_test(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void grouptable_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void accesstable_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void accesstable_set(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void accesstable_test(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void accesstable_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void viewtable_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void viewtable_set(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void viewtable_test(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void viewtable_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpCommunityEntry_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpCommunityEntry_set(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpCommunityEntry_test(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpCommunityEntry_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpSshtmSession_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpSshtmSession_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTlstmSession_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTlstmSession_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTlstmCertificateMapping_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTlstmCertificateMapping_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTlstmCertToTSNEntry_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTlstmCertToTSNEntry_set(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTlstmCertToTSNEntry_test(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTlstmCertToTSNEntry_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTlstmParamsEntry_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTlstmParamsEntry_set(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTlstmParamsEntry_test(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTlstmParamsEntry_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTlstmAddrEntry_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTlstmAddrEntry_set(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTlstmAddrEntry_test(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTlstmAddrEntry_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTsmStats_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTsmStats_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTsmConfiguration_get(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTsmConfiguration_set(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTsmConfiguration_test(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
void snmpTsmConfiguration_next(OIDC_T, int, OIDC_T*, SNMP_PKT_T*, VB_T*);
